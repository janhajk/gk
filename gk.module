<?php
function gk_cron() {

}

function gk_insert_pdf_header() {
	include_once (drupal_get_path('module', 'gk') . '/pdf/gkpdf.class.php');
}

/**
 * implementation of hook_menu
 */
function gk_menu() {
   // Formular um Listen, Berichte und Serienbriefe zu erstellen
   $items['gk/liste_erstellen'] = array(
      'page callback'	=>	'gk_serienbrief_callback',
      'type'	=>	MENU_CALLBACK,
      'access arguments'	=>	array('send Serienbrief',)
   );
   // Startseite mit Übersicht über alle Spenden
   $items['gk/overview'] = array(
      'page callback' => 'gk_overview',
      'type' => MENU_CALLBACK,
      'access arguments' => array('send Serienbrief'),
   );
   return $items;
}

/**
 * implementation of hook_perm
 */
function gk_perm() {
	return array (
		'send Serienbrief'
		);
}

/*
 * Übersicht
 * Zeigt eine Übersicht über alle Spenden auf der Startseite
 **/
function gk_overview(){

	//for the current year
	$year = date("Y",time());
	$month_a = $year.'-00-00T00:00:00';
	$month_b = $year.'-12-31T23:59:59';

	$result = db_query("SELECT COUNT(field_spende_betrag_value) as total_anz,
		SUM(field_spende_betrag_value) as total FROM {content_type_spende} 
		WHERE field_spende_datum_value >='%s' 
		AND field_spende_datum_value <='%s' ",$month_a,$month_b);
	$row = db_fetch_object($result);
	drupal_set_title('Spenden&uuml;bersicht');

	$out .= '<h3>Spenden f&uuml;r das aktuelle Jahr ('.date("Y",time()).')</h3>';
	$header = array('Anzahl','Spendentotal');
	$rows = array();
	$rows[] = array('data'=>array($row->total_anz,number_format($row->total,2,'.','\'')));
	$out .= theme('table',$header,$rows);

	//*********************************************************

	//for the last year
	$year = date("Y",time())-1;
	$month_a = $year.'-00-00T00:00:00';
	$month_b = $year.'-12-31T23:59:59';

	$result = db_query("SELECT COUNT(field_spende_betrag_value) as total_anz,
		SUM(field_spende_betrag_value) as total FROM {content_type_spende} 
		WHERE field_spende_datum_value >='%s' 
		AND field_spende_datum_value <='%s' ",$month_a,$month_b);
	$row = db_fetch_object($result);
	drupal_set_title('Spenden&uuml;bersicht');

	$out .= '<h3>Spenden f&uuml;r das letzte Jahr ('.$year.')</h3>';
	$header = array('Anzahl','Spendentotal');
	$rows = array();
	$rows[] = array('data'=>array($row->total_anz,number_format($row->total,2,'.','\'')));
	$out .= theme('table',$header,$rows);

	//*********************************************************

	//for the last month
	$total_spenden = 0;
	$total_spenden_anz = 0;
	$month1_a = array();
	$month1_b = array();
	$rows = array();
	for($i=0;$i<24;$i++){
		$month = date("n",time())-$i;
		$year = date("Y",time());
		if($month<=0){$month=12+$month;$year--;}	// Vor Januar kommt Dezember; zustäzl. Jahreswechsel
		if($month<=0){$month=12+$month;$year--;}	// Vor Januar kommt Dezember; zustäzl. Jahreswechsel
		if($month<=0){$month=12+$month;$year--;}	// Vor Januar kommt Dezember; zustäzl. Jahreswechsel
		$tage = date("t",mktime(0, 0, 0, $month, 1, $year));
		$month = sprintf("%02d", $month);
		//$month1_a[$i] = date("Y-m-00",time()-$i*(60*60*24*$tage)).'T00:00:00';
		$month1_a[$i] = $year.'-'.$month.'-00T00:00:00';
		//$month1_b[$i] = date("Y-m-31",time()-$i*(60*60*24*$tage)).'T00:00:00';
		$month1_b[$i] = $year.'-'.$month.'-'.$tage.'T00:00:00';
		$result = db_query("SELECT COUNT(field_spende_betrag_value) as total_anz,
			SUM(field_spende_betrag_value) as total FROM {content_type_spende} 
			WHERE field_spende_datum_value >='%s' 
			AND field_spende_datum_value <='%s' ",$month1_a[$i],$month1_b[$i]);
		$row2 = db_fetch_object($result);
		$t = time()-$i*(60*60*24*$tage);
		$t = mktime(0, 0, 0, $month, $tage, $year);
		$rows[] = array('data'=>array(date("M-Y",$t),$row2->total_anz,number_format($row2->total,2,'.','\'')));
		$total_spenden += $row2->total;
		$total_spenden_anz += $row2->total_anz;
	}

	$rows[] = array('data'=>array('<b>Total</b>',$total_spenden_anz,number_format($total_spenden,2,'.','\'')),'style'=>'color:white;background-color:#890B10;');
	$out .= '<h3>Spenden f&uuml;r die vergangenen Monate</h3>';
	$header = array('Monat','Anzahl','Spendentotal');
	$out .= theme('table',$header,$rows);

	return $out;
}




/**
 * callback function
 */
function gk_serienbrief_callback() {
	drupal_add_css(drupal_get_path('module', 'gk') . '/gk.css');
	drupal_add_js(drupal_get_path('module', 'gk') . '/jquery.checkboxes.js');
	drupal_add_js(drupal_get_path('module', 'gk') . '/gk.js');
	return drupal_get_form('gk_serienbrief_taxonomy_form');
}

/**
 * Theme the form definition
 */
function theme_gk_serienbrief_taxonomy_form($form) {
	$output = '<div class="left">';
	$output .= drupal_render($form['gk_vocab1']);
	$output .= drupal_render($form['gk_vocab2']);
	$output .= drupal_render($form['gk_vocab3']);
	$output .= drupal_render($form['gk_vocab4']);
	$output .= drupal_render($form['gk_vocab5']);
	$output .= '</div>';
	$output .= drupal_render($form);
	return $output;
}



/**
 * The form definition for the submit form
 * This form is THE form for creating a new list/letter
 */
function gk_serienbrief_taxonomy_form() {
	$template_nid = $_SESSION['tmp_template_nid'];
	unset ($_SESSION['tmp_template_nid']);

	$vocabs = taxonomy_get_vocabularies('profile');
	$form = array ();

	$form['col_1'] = array(
		'#value'	=>	'<div class="left">',
	);

	// Erstellt die fünf Profiltypen (Spender, Mitglied, Team, allg Adressen, Sonstiges)
	// Lädt den Taxonomy-Tree und hängt diesen als Option-Felder an
	$i = 1;
	foreach ($vocabs as $vocab) {
		$tmp_options = taxonomy_get_tree($vocab->vid);
		$options = array (
			'999' => t('Alle')
		);
		foreach ($tmp_options as $value) {
			$options[$value->tid] = $value->name;
		}
		$form['gk_vocab' . $i] = array (
			'#type' => 'checkboxes',
			'#title' => $vocab->name,
			'#options' => $options,
			'#attributes' => array (
				'class' => 'gk_vocab_class_' . $i
		),
		);
		$i++;
	}

	$form['col_2'] = array(
		'#value'	=>	'</div>',
	);

	$form['im_jahresbericht'] = array (
		'#type' => 'radios',
		'#title' => t('Im Jahresbericht'),
		'#options' => array (
			'1' => t('Ja'),
			'0' => t('Nein'),
			'99' => t('Egal')
	),
		'#default_value' => '99',


	);

	$form['verdankungsart'] = array (
		'#type' => 'radios',
		'#title' => t('Verdankungsart'),
		'#options' => array (
			'1' => t('Keine Verdankung'),
			'2' => t('Monatsverdankung'),
			'3' => t('Jahresverdankung'),
			'99' => t('Egal')
	),
		'#default_value' => '99',


	);

	$form['beitragsart'] = array(
		'#type' => 'radios',
		'#title' => t('Beitragsart'),
		'#options' => array(
			'1' => t('Spende'),
			'2' => t('Mitgliederbeitrag'),
			'3' => t('Spende + Mitgliedsbeitrag'),
			'99' => t('egal'),
		),
		'#default_value' => '99', 
		'#description' => t('"egal" erlaubt es, Briefe auch an Nicht-Spender zu verschicken. In diesem Fall das "Datum von" und "Datum bis" Feld leer lassen'),
	);


	$form['kumulieren'] = array (
		'#type' => 'select',
		'#title' => t('Kumulieren'),
		'#options' => array (
			'1' => t('Ja'),
			'0' => t('Nein'),
		),
		'#description'	=>	t('Dieses Feature funktioniert nur f&uuml;r Spendenlisten. Spendenlisten f&uuml;r
							   Serienbriefe werden immer kumuliert.')
	);


	$form['type_what'] = array (
		'#type' => 'checkboxes',
		'#title' => t('Was soll exportiert werden?'),
		'#options' => array (
			'1' => t('Serienbrief'),
			'2' => t('Adressen (Excel export)'),
			'3' => t('Adressetiketten'),
			'4' => t('Spendenliste')
	));

   // Template Vorlage
	$sql = "SELECT * FROM {node} WHERE type = '%s'";
	$result = db_query($sql, 'serienbrief_template');
	$options = array();
	while ($row = db_fetch_object($result)) {
		$options[$row->nid] = $row->title;
	}

	$form['serienbrief'] = array (
		'#type' => 'select',
		'#title' => t('Serienbrief Template'),
		'#options' => $options,
		'#default_value' => 11882

	);

	$def_datum = date('m.Y', time()-30*24*60*60);
	$form['date_von'] = array (
		'#title' => t('Datum von'),
		'#type' => 'textfield',
		'#default_value' => $def_datum,
	//		'#date_type' => DATE_DATETIME,
	//		'#date_timezone' => date_default_timezone_name(),
	//		'#date_format' => 'm.Y',
	//		'#date_increment' => 1,
	//		'#date_year_range' => '-5:+1',
	'#description' => t('Falls eine Jahresverdankung gew&auml;hlt wird, spielt lediglich das Jahr eine Rolle. Bei Monatsverdankung jeweils der Monat.')
	);

	$form['date_bis'] = array (
		'#title' => t('Datum bis'),
		'#type' => 'textfield',
	//		'#date_type' => DATE_DATETIME,
	//		'#date_timezone' => date_default_timezone_name(),
	//		'#date_format' => 'm.Y',
	//		'#date_increment' => 1,
	//		'#date_year_range' => '-5:+1',
	'#description' => t('Leer lassen falls es nicht verwendet werden soll')
	);

	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => t('Submit')
	);

	$form['template_nid'] = array (
		'#type' => 'hidden',
		'#value' => $template_nid
	);

	return $form;
}

/**
 * submitting the form and starting the pdf creating process
 */
function gk_serienbrief_taxonomy_form_submit($form, & $form_state) {

	$type_what = 0;
	foreach ($form_state['values']['type_what'] as $key => $item) {
		if($item != 0){
			$type_what = $item;
		}
	}
	switch ($type_what) {
		case '4':
         include (drupal_get_path('module', 'gk') . '/spendenliste.php');
			_gk_generate_spendenliste($form,$form_state);
			break;
		default:
         include (drupal_get_path('module', 'gk') . '/serienbrief.php');
			_gk_send_serienbrief_general($form, $form_state);
			break;
	}

	drupal_set_message(t('Brief wurde erfolgreich erstellt.'));
	drupal_goto('gk/liste_erstellen');
}


/**
	get's all the terms for a given node
*/
function gk_get_terms_for_node($nid){
	$result = db_query("SELECT td.tid,td.name FROM {term_node} AS tn, {term_data} as td WHERE tn.nid = %d AND tn.tid = td.tid",$nid);
	$rows = array();
	while($row = db_fetch_object($result)){
		$rows[$row->tid] = $row->name;
	}
	return $rows;
}


/**
 * Just some internal function
 *
 * @param string $str_date
 * @return unknown
 */
function _gk_transform_date($str_date) {
	$ar_tmp = explode(".", $str_date);
	$out = '';
	$granularity = 'month';
	if(count($ar_tmp)==1){
		$granularity = 'year';
	}
	switch ($granularity) {
		case 'month' :
			$tmp = $ar_tmp[1].'-'.$ar_tmp[0].'-00';
			$out = $tmp.'T00:00:00';
			break;
		case 'year':
			$tmp = $ar_tmp[0].'-01-00';
			$out = $tmp.'T00:00:00';
			break;
		default :
			break;
	}
	return $out;
}

/**
 * making the db query and fetching the profil information
 * @param int $nid
 */
function _gk_get_profil_param($nid) {
	$sql = "SELECT * FROM {content_type_profile} WHERE " .
	"nid = %d";
	$result = db_query($sql, $nid);
	$row = db_fetch_array($result);
	return $row;
}

/**
 * Making the db query and fetching the serienbrief template
 * @param int $nid
 */
function _gk_get_template_param($nid) {

	$sql = "SELECT * FROM {content_type_serienbrief_template} WHERE nid = %d";
	$result = db_query($sql, $nid);
	$row = db_fetch_array($result);
	return $row;
}